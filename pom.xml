<?xml version="1.0" encoding="UTF-8"?>
<!--

Copyright (c) 2000-2019, Board of Trustees of Leland Stanford Jr. University
All rights reserved.

Redistribution and use in source and binary forms, with or without
modification, are permitted provided that the following conditions are met:

1. Redistributions of source code must retain the above copyright notice,
this list of conditions and the following disclaimer.

2. Redistributions in binary form must reproduce the above copyright notice,
this list of conditions and the following disclaimer in the documentation
and/or other materials provided with the distribution.

3. Neither the name of the copyright holder nor the names of its contributors
may be used to endorse or promote products derived from this software without
specific prior written permission.

THIS SOFTWARE IS PROVIDED BY THE COPYRIGHT HOLDERS AND CONTRIBUTORS "AS IS"
AND ANY EXPRESS OR IMPLIED WARRANTIES, INCLUDING, BUT NOT LIMITED TO, THE
IMPLIED WARRANTIES OF MERCHANTABILITY AND FITNESS FOR A PARTICULAR PURPOSE
ARE DISCLAIMED. IN NO EVENT SHALL THE COPYRIGHT HOLDER OR CONTRIBUTORS BE
LIABLE FOR ANY DIRECT, INDIRECT, INCIDENTAL, SPECIAL, EXEMPLARY, OR
CONSEQUENTIAL DAMAGES (INCLUDING, BUT NOT LIMITED TO, PROCUREMENT OF
SUBSTITUTE GOODS OR SERVICES; LOSS OF USE, DATA, OR PROFITS; OR BUSINESS
INTERRUPTION) HOWEVER CAUSED AND ON ANY THEORY OF LIABILITY, WHETHER IN
CONTRACT, STRICT LIABILITY, OR TORT (INCLUDING NEGLIGENCE OR OTHERWISE)
ARISING IN ANY WAY OUT OF THE USE OF THIS SOFTWARE, EVEN IF ADVISED OF THE
POSSIBILITY OF SUCH DAMAGE.

-->
<project xmlns="http://maven.apache.org/POM/4.0.0"
         xmlns:xsi="http://www.w3.org/2001/XMLSchema-instance"
         xsi:schemaLocation="http://maven.apache.org/POM/4.0.0 http://maven.apache.org/xsd/maven-4.0.0.xsd">
  <modelVersion>4.0.0</modelVersion>
  
  <groupId>org.lockss</groupId>
  <artifactId>lockss-parent-pom</artifactId>
  <version>1.9.0</version>
  <packaging>pom</packaging>
  
  <name>lockss-parent-pom</name>
  <description>Maven infrastructure common to LOCKSS projects</description>
  <url>https://www.lockss.org/</url>
  <inceptionYear>2000</inceptionYear>
  
  <organization>
    <name>LOCKSS Program</name>
    <url>https://www.lockss.org/</url>
  </organization>
  
  <licenses>
    <license>
      <name>3-Clause BSD License</name>
      <url>https://opensource.org/licenses/BSD-3-Clause</url>
    </license>
  </licenses>
  
  <!--
      For each developer alphabetically by last name:
      - <id> is the GitHub username
      - <email> is the GPG e-mail address
      There is also a parallel <contributors> stanza
  -->
  <developers>
    <developer>
      <id>fergaloy</id>
      <name>Fernando Garc√≠a-Loygorri</name>
      <email>fergaloy@lockss.org</email>
      <organization>LOCKSS Program</organization>
      <organizationUrl>https://www.lockss.org/</organizationUrl>
    </developer>
    <developer>
      <id>clairegriffin</id>
      <name>Claire Griffin</name>
      <email>clairetg@stanford.edu</email>
      <organization>LOCKSS Program</organization>
      <organizationUrl>https://www.lockss.org/</organizationUrl>
    </developer>
    <developer>
      <id>thibgc</id>
      <name>Thib Guicherd-Callin</name>
      <email>thib@cs.stanford.edu</email>
      <organization>LOCKSS Program</organization>
      <organizationUrl>https://www.lockss.org/</organizationUrl>
    </developer>
    <developer>
      <id>tlipkis</id>
      <name>Tom Lipkis</name>
      <email>tal@lockss.org</email>
      <organization>LOCKSS Program</organization>
      <organizationUrl>https://www.lockss.org/</organizationUrl>
    </developer>
    <developer>
      <id>dlvargas</id>
      <name>Daniel Vargas</name>
      <email>dlvargas@stanford.edu</email>
      <organization>LOCKSS Program</organization>
      <organizationUrl>https://www.lockss.org/</organizationUrl>
    </developer>
  </developers>

  <!-- Must be in every lockss-parent-pom descendant -->
  <scm>
    <connection>${scmConnection}</connection>
    <developerConnection>${scmDeveloperConnection}</developerConnection>
    <url>${scmUrl}</url>
  </scm>
  
  <distributionManagement>

    <!--  To deploy to Maven Central; see http://central.sonatype.org/pages/apache-maven.html  -->
    <snapshotRepository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/content/repositories/snapshots</url>
    </snapshotRepository>
    <repository>
      <id>ossrh</id>
      <url>https://oss.sonatype.org/service/local/staging/deploy/maven2/</url>
    </repository>

  </distributionManagement>

  <!--

      PROPERTIES

  -->
  
  <properties>

    <!-- Java related -->
    <project.build.sourceEncoding>UTF-8</project.build.sourceEncoding>
    <project.reporting.outputEncoding>UTF-8</project.reporting.outputEncoding>
    <java.version>1.8</java.version>
    <maven.compiler.source>${java.version}</maven.compiler.source>
    <maven.compiler.target>${java.version}</maven.compiler.target>
    <test.fork.count>1.0C</test.fork.count>
    
    <!-- Git related -->
    <gitSshUser>git</gitSshUser>
    <gitHost>github.com</gitHost>
    <gitGroupId>lockss</gitGroupId>
    <gitProjectId>${project.artifactId}</gitProjectId>
    <scmConnection>scm:git:git://${gitHost}/${gitGroupId}/${gitProjectId}.git</scmConnection>
    <scmDeveloperConnection>scm:git:${gitSshUser}@${gitHost}:${gitGroupId}/${gitProjectId}.git</scmDeveloperConnection>
    <scmUrl>https://${gitHost}/${gitGroupId}/${gitProjectId}</scmUrl>

    <!--
        Build related
    -->
    
    <!--
         skipTestJar
         
         Set to false to generate a test JAR
         (target/${project.artifactId}.${project.version}-tests.jar). Default:
         true (meaning a test JAR is not generated by default).
    -->
    <skipTestJar>true</skipTestJar>

    <!--
        skipJavadoc
        
        Set to false to generate a Javadoc JAR. Default: true (meaning a
        Javadoc JAR is not generated by default).
    -->
    <skipJavadoc>true</skipJavadoc>

    <!--
        skipSources
        
        Set to false to generate a Sources JAR. Default: true (meaning a
        Sources JAR is not generated by default).
    -->
    <skipSources>true</skipSources>
    
    <!--
        skipGpg
        
        Set to false to sign build artifacts with GnuPG. Default: true (meaning
        artifacts are not signed with GnuPG by default).
    -->
    <skipGpg>true</skipGpg>
    
    <!--
        skipDocker
        
        Set to false if the project requires Docker processing in general.
        Specific Docker-related activities are controlled with skipDockerBuild,
        skipDockerTag, skipDockerPush, and other properties. Default: true
        (meaning Docker processing is disabled by default).
    -->
    <skipDocker>true</skipDocker>
    
    <!--
        skipDockerBuild
        
        Set to false to build a Docker image (if skipDocker is also set to
        false). Default: true (meaning the build of a Docker image is disabled
        by default even if skipDocker is false). 
    -->
    <skipDockerBuild>true</skipDockerBuild>
    
    <!--
        skipDockerTag
        
        Set to false to tag the Docker image with ${dockerTag} (if skipDocker
        is also set to false). Default: value of ${skipDockerBuild} (meaning
        that if a Docker build is requested, then an image tag is requested).
    -->    
    <skipDockerTag>${skipDockerBuild}</skipDockerTag>

    <!--
        skipDockerPush
        
        Set to false to push the Docker image to Docker Hub (if skipDocker is
        also set to false). Default: true (meaning that the Docker image is not
        pushed to Docker Hub by default, even if skipDocker is false).
    -->
    <skipDockerPush>true</skipDockerPush>

    <!--
        skipDeploy
        
        Set to false to enable the deployment of artifacts during the deploy
        phase. Useful to prevent accidental deployment without using an approved
        production profile, or if repeating a non-snapshot deploy phase for side
        effects (because one can only deploy a non-snapshot ${project.version}
        once). Default: true (meaning that deployment of artifacts is disabled
        by default).  
    -->
    <skipDeploy>true</skipDeploy>

    <!--
        skipDeployEmail
        
        If set to false, an e-mail is sent from ${deployEmailFrom} to
        ${deployEmailTo} at the end of the deploy phase. By default, this has
        the same value as ${skipDeploy}. See also deployEmailFailOnError.
    -->
    <skipDeployEmail>${skipDeploy}</skipDeployEmail>

    <!--
        Spring / Spring Boot related
    -->
    
    <!--
        skipSpringBootRepackage
        
        Set to false if the project is a Spring Boot project. Currently the only
        aspect of this is that the Spring Boot Maven Plugin's repackage goal is
        executed. Default: true (meaning that, by default, a project is not a
        Spring Boot project and the repackage goal of the Spring Boot plugin is
        not executed).
    -->
    <skipSpringBootRepackage>true</skipSpringBootRepackage><!-- set to false in child that requires Spring Boot processing -->

    <!-- 
        springServicePort
        
        If this is a Spring Boot app with a service port, set the port in this
        variable. (Needed to parameterize the Docker image, ARG SVC_PORT.)
    -->
    <springServicePort>UNDEFINED</springServicePort> <!-- set in child -->

    <!--
        skipEtags

        Set to false to generate emacs TAGS file in generate-resources phase
    -->
    <skipEtags>true</skipEtags>

    <!-- Maven related: Maven internals -->
    <plugin.version.maven-antrun-plugin>1.8</plugin.version.maven-antrun-plugin>
    <plugin.version.maven-compiler-plugin>3.7.0</plugin.version.maven-compiler-plugin>
    <plugin.version.maven-deploy-plugin>2.8.2</plugin.version.maven-deploy-plugin>
    <plugin.version.maven-gpg-plugin>1.6</plugin.version.maven-gpg-plugin>
    <plugin.version.maven-jar-plugin>3.1.0</plugin.version.maven-jar-plugin>
    <plugin.version.maven-javadoc-plugin>3.0.0</plugin.version.maven-javadoc-plugin>
    <plugin.version.maven-source-plugin>3.0.1</plugin.version.maven-source-plugin>
    <plugin.version.maven-surefire-plugin>2.19.1</plugin.version.maven-surefire-plugin>

    <!-- Maven related: key plugins -->
    <plugin.version.dockerfile-maven-plugin>1.4.0</plugin.version.dockerfile-maven-plugin>
    <plugin.version.exec-maven-plugin>1.6.0</plugin.version.exec-maven-plugin>
    <plugin.version.maven-postman-plugin>0.1.6</plugin.version.maven-postman-plugin>
    <plugin.version.nexus-staging-maven-plugin>1.6.8</plugin.version.nexus-staging-maven-plugin>
    <plugin.version.git-commit-id-plugin>2.2.5</plugin.version.git-commit-id-plugin>
    <plugin.version.swagger-codegen-maven-plugin>2.3.1</plugin.version.swagger-codegen-maven-plugin>

    <!--  Docker related -->
    <dockerPrefix>lockss</dockerPrefix>
    <dockerRepository>${dockerPrefix}/${project.artifactId}</dockerRepository>
    <dockerTag>${project.version}</dockerTag>
    <dockerServicePort>${springServicePort}</dockerServicePort>

    <!-- Ant related -->
    <ant.datetime.iso8601Date>yyyy-MM-dd</ant.datetime.iso8601Date>
    <ant.datetime.iso8601Time>HH:mm:ss</ant.datetime.iso8601Time>
    <ant.datetime.iso8601Timestamp>${ant.datetime.iso8601Date}'T'${ant.datetime.iso8601Time}XXX</ant.datetime.iso8601Timestamp>

    <!-- Our own -->
    <skipTests>false</skipTests>
    <skipIntegrationTests>true</skipIntegrationTests>
    <loglevel>info</loglevel>
    <rootloglevel></rootloglevel>
    <tmpdir>${java.io.tmpdir}</tmpdir>
    <keeptempfiles>false</keeptempfiles>
    <outputtofile>true</outputtofile>
    <trimstack>false</trimstack>
    <file.buildinfo>${basedir}/target/build-info</file.buildinfo>
    <file.classpath.compile>${basedir}/target/compile-classpath</file.classpath.compile>
    <file.classpath.runtime>${basedir}/target/run-classpath</file.classpath.runtime>
    <file.classpath.test>${basedir}/target/test-classpath</file.classpath.test>
    <fatJarClassifier>with-deps</fatJarClassifier>
    
    <!-- Mail related -->
    <deployEmailFrom>buildmaster@lockss.org</deployEmailFrom>
    <deployEmailTo>dev-notify@lockss.org</deployEmailTo>
    <deployEmailFailOnError>true</deployEmailFailOnError>

    <!-- Bundle versions -->
    <build.releasename>1.75.0</build.releasename>
    <lockss.core.version>1.2.0-SNAPSHOT</lockss.core.version>
    <lockss.core.bundleVersion>${lockss.core.version}</lockss.core.bundleVersion>
    <lockss.spring-boot.version>1.5.17.RELEASE</lockss.spring-boot.version>
    <lockss.spring.version>4.3.18.RELEASE</lockss.spring.version>
    <lockss.springfox.version>2.6.1</lockss.springfox.version>
    <lockss.spring.bundleVersion>1.8.0-SNAPSHOT</lockss.spring.bundleVersion>
    <lockss.hamcrest.version>1.3</lockss.hamcrest.version>
    <lockss.junit4.version>4.12</lockss.junit4.version>
    <lockss.junit4.bundleVersion>1.2.0-SNAPSHOT</lockss.junit4.bundleVersion>
    <lockss.junit5-jupiter.version>5.1.0</lockss.junit5-jupiter.version>
    <lockss.junit5-platform.version>1.1.0</lockss.junit5-platform.version>
    <lockss.junit5.bundleVersion>1.2.0-SNAPSHOT</lockss.junit5.bundleVersion>

    <!-- Versions -->
    <lockss.configuration-service.version>1.1.0-SNAPSHOT</lockss.configuration-service.version>
    <lockss.metadataextractor-common.version>1.3.0-SNAPSHOT</lockss.metadataextractor-common.version>
    <lockss.metadata-extraction-service.version>1.1.0-SNAPSHOT</lockss.metadata-extraction-service.version>
    <lockss.metadata-service.version>1.0.0-SNAPSHOT</lockss.metadata-service.version>
    <lockss.plugins.version>20180327</lockss.plugins.version>
    <lockss.repository-client.version>1.6.0-SNAPSHOT</lockss.repository-client.version>
    <lockss.repository-core.version>1.12.0-SNAPSHOT</lockss.repository-core.version>
    <lockss.repository-service.version>1.8.0-SNAPSHOT</lockss.repository-service.version>
    <lockss.tdb-tools.version>1.2.0-SNAPSHOT</lockss.tdb-tools.version>
    <lockss.tdbxml-maven-plugin.version>1.2.0-SNAPSHOT</lockss.tdbxml-maven-plugin.version>
    <lockss.util.version>1.7.0-SNAPSHOT</lockss.util.version>

    <!-- 3rd party library versions -->
    <!-- If the slfj4 version is changed to 1.8.x or later,
         lockss.log4j.slf4j.binding should be changed to log4j-slf4j18-impl -->
    <lockss.slf4j.version>1.7.25</lockss.slf4j.version>
    <lockss.log4j.slf4j.binding>log4j-slf4j-impl</lockss.log4j.slf4j.binding>
    <lockss.activemq.version>5.15.3</lockss.activemq.version>

    <lockss.version.jackson>2.9.7</lockss.version.jackson>

  </properties>

  <repositories>
  
    <repository>
      <id>ossrh-snapshots</id>
      <name>Sonatype OSSRH Snapshots</name>
      <url>https://oss.sonatype.org/service/local/repositories/snapshots/content</url>
      <snapshots>
        <enabled>true</enabled>
      </snapshots>
      <releases>
        <enabled>false</enabled>
      </releases>
    </repository>
  
  </repositories>

  <!-- BEGIN build -->

  <build>
  
    <!-- BEGIN plugins -->

    <plugins>

      <!-- BEGIN plugin maven-surefire-plugin -->
    
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-surefire-plugin</artifactId>
        <version>${plugin.version.maven-surefire-plugin}</version>
        <configuration>
          <skipTests>${skipTests}</skipTests>
          <includes>
            <include>**/Test*.java</include>
            <include>**/Func*.java</include>
          </includes>
          <excludes>
            <!-- SOAP tests waiting for Jetty upgrade -->
            <exclude>**/ws/*/Func*.java</exclude>
            <!-- Default excludes -->
            <exclude>**/*$*</exclude>
          </excludes>
          <redirectTestOutputToFile>${outputtofile}</redirectTestOutputToFile>
          <forkCount>${test.fork.count}</forkCount>
          <reuseForks>false</reuseForks>
          <trimStackTrace>${trimstack}</trimStackTrace>
          <systemPropertyVariables>
            <java.io.tmpdir>${tmpdir}</java.io.tmpdir>$>
            <org.lockss.keepTempFiles>${keeptempfiles}</org.lockss.keepTempFiles>
            <org.lockss.unitTesting>true</org.lockss.unitTesting>
            <org.lockss.defaultLogLevel>${loglevel}</org.lockss.defaultLogLevel>
            <org.lockss.defaultRootLogLevel>${rootloglevel}</org.lockss.defaultRootLogLevel>
          </systemPropertyVariables>
        </configuration>
        <dependencies>
          <dependency>
            <groupId>org.junit.platform</groupId>
            <artifactId>junit-platform-surefire-provider</artifactId>
            <version>${lockss.junit5-platform.version}</version>
          </dependency>
          <dependency>
            <groupId>org.junit.jupiter</groupId>
            <artifactId>junit-jupiter-engine</artifactId>
            <version>${lockss.junit5-jupiter.version}</version>
          </dependency>
          <dependency>
            <groupId>org.junit.vintage</groupId>
            <artifactId>junit-vintage-engine</artifactId>
            <version>${lockss.junit5-jupiter.version}</version>
          </dependency>
        </dependencies>
      </plugin>

      <!-- END plugin maven-surefire-plugin -->

      <!-- BEGIN plugin maven-compiler-plugin -->

      <!-- For useIncrementalCompilation=false -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-compiler-plugin</artifactId>
        <version>${plugin.version.maven-compiler-plugin}</version>
        <configuration>
          <useIncrementalCompilation>false</useIncrementalCompilation>
        </configuration>
      </plugin>

      <!-- END plugin maven-compiler-plugin -->

      <!-- BEGIN plugin git-commit-id-plugin -->

      <plugin>
        <groupId>pl.project13.maven</groupId>
        <artifactId>git-commit-id-plugin</artifactId>
        <version>${plugin.version.git-commit-id-plugin}</version>
        <executions>

          <!-- BEGIN execution generate-git-properties -->

          <execution>
            <id>generate-git-properties</id>
            <phase>validate</phase>
            <goals>
              <goal>revision</goal>
            </goals>   
            <configuration>
              <generateGitPropertiesFile>true</generateGitPropertiesFile>
              <skipPoms>false</skipPoms>
            </configuration>

          </execution>

          <!-- END execution generate-git-properties -->

        </executions>
      </plugin>
      
      <!-- END plugin git-commit-id-plugin -->

      <!-- BEGIN plugin maven-antrun-plugin -->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-antrun-plugin</artifactId>
        <version>${plugin.version.maven-antrun-plugin}</version>
        <dependencies>
          <dependency>
            <groupId>ant-contrib</groupId>
            <artifactId>ant-contrib</artifactId>
            <version>20020829</version>
          </dependency>  
        </dependencies>
        <executions>

          <!-- BEGIN execution check-docker -->
          
          <!-- If Docker build needed, check early that Docker is running -->
          <execution>
            <id>check-docker</id>
            <phase>validate</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <taskdef resource="net/sf/antcontrib/antcontrib.properties" />
                <if>
                  <and>
                    <isfalse value="${skipDocker}" />
                    <or>
                      <isfalse value="${skipDockerBuild}" />
                      <isfalse value="${skipDockerTag}" />
                      <isfalse value="${skipDockerPush}" />
                    </or>
                  </and>
                  <then>
                    <echo message="Checking that Docker daemon is running..." />
                    <exec executable="docker" output="/dev/null"
                          failonerror="true" failifexecutionfails="true">
                      <arg value="info" />
                    </exec>                  
                  </then>
                  <else>
                    <echo message="Not checking that Docker daemon is running." />
                  </else>
                </if>
              </target>
            </configuration>
          </execution>

          <!-- END execution check-docker -->
          
          <!-- BEGIN execution generate-build-info -->
          
          <!-- Creates a build info file -->
          <execution>
            <id>generate-build-info</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <target>
                <exec executable="hostname" outputproperty="hostname0" failifexecutionfails="false" />
                <condition property="hostname" value="${env.HOSTNAME}" else="${hostname0}">
                  <isset property="env.HOSTNAME" />
                </condition>
                <propertyfile comment="Build information" file="${file.buildinfo}">
                  <entry key="build.groupId" value="${project.groupId}" />
                  <entry key="build.artifactId" value="${project.artifactId}" />
                  <entry key="build.version" value="${project.version}" />
                  <entry key="build.packaging" value="${project.packaging}" />
                  <entry key="build.parent.groupId" value="${project.parent.groupId}" />
                  <entry key="build.parent.artifactId" value="${project.parent.artifactId}" />
                  <entry key="build.parent.version" value="${project.parent.version}" />
                  <entry key="build.parent.packaging" value="${project.parent.packaging}" />
                  <entry key="build.date" type="date" pattern="${ant.datetime.iso8601Date}" value="now" />
                  <entry key="build.time" type="date" pattern="${ant.datetime.iso8601Time}" value="now" />
                  <entry key="build.timestamp" type="date" pattern="${ant.datetime.iso8601Timestamp}" value="now" />
                  <entry key="build.releasename" value="${build.releasename}" />
                  <entry key="build.host" value="${hostname}" />
                  <entry key="build.user.name" value="${user.name}" />
                  <entry key="build.os.name" value="${os.name}" />
                  <entry key="build.os.arch" value="${os.arch}" />
                  <entry key="build.os.version" value="${os.version}" />
                  <entry key="build.java.version" value="${java.version}" />
                  <entry key="build.java.class.version" value="${java.class.version}" />
                  <entry key="build.java.vendor" value="${java.vendor}" />
                  <entry key="build.java.home" value="${java.home}" />
                  <entry key="build.java.specification.version" value="${java.specification.version}" />
                  <entry key="build.java.specification.vendor" value="${java.specification.vendor}" />
                  <entry key="build.java.specification.name" value="${java.specification.name}" />
                  <entry key="build.java.vm.version" value="${java.vm.version}" />
                  <entry key="build.java.vm.vendor" value="${java.vm.vendor}" />
                  <entry key="build.java.vm.name" value="${java.vm.name}" />
                  <entry key="build.java.vm.specification.version" value="${java.vm.specification.version}" />
                  <entry key="build.java.vm.specification.vendor" value="${java.vm.specification.vendor}" />
                  <entry key="build.java.vm.specification.name" value="${java.vm.specification.name}" />
                  <entry key="build.git.origin" value="${git.remote.origin.url}" />
                  <entry key="build.git.branch" value="${git.branch}" />
                  <entry key="build.git.commit" value="${git.commit.id.abbrev}" />
                  <entry key="build.git.dirty" value="${git.dirty}" />
                </propertyfile>
              </target>
            </configuration>
          </execution>
          
          <!-- END execution generate-build-info -->
          
          <!-- BEGIN execution generate-classpath-files -->
          
          <!-- Creates classpath files (and exports Maven properties) -->
          <execution>
            <id>generate-classpath-files</id>
            <phase>generate-sources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <exportAntProperties>true</exportAntProperties>
              <target>
                <property name="compile_classpath"
                          refid="maven.compile.classpath" />
                <echo message="${compile_classpath}"
                      file="${file.classpath.compile}"/>
                <property name="test_classpath"
                          refid="maven.test.classpath" />
                <echo message="${test_classpath}"
                      file="${file.classpath.test}"/>
                <property name="runtime_classpath"
                          refid="maven.runtime.classpath" />
                <echo message="${runtime_classpath}"
                      file="${file.classpath.runtime}"/>
              </target>
            </configuration>
          </execution>
          
          <!-- END execution generate-classpath-files -->
          
          <!-- BEGIN execution build-etags -->
          
          <execution>
            <id>build-etags</id>
            <phase>generate-resources</phase>
            <goals>
              <goal>run</goal>
            </goals>
            <configuration>
              <skip>${skipEtags}</skip>
              <target>
		<apply executable="etags" dir="${basedir}"
		       relative="true"
		       parallel="true">
		  <arg value="-S"/>
		  <!--        <arg value="-o"/> -->
		  <!--        <arg file="${etags.filename}"/> -->
		  <fileset dir="${basedir}" includes="src/**/*.java"/>
		</apply>
              </target>
            </configuration>
          </execution>

          <!-- END execution build-etags -->
          
        </executions>
      </plugin>

      <!-- END plugin maven-antrun-plugin -->

      <!-- BEGIN plugin maven-jar-plugin -->

      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-jar-plugin</artifactId>
        <version>${plugin.version.maven-jar-plugin}</version>
        <executions>
          <execution>
            <goals>
              <goal>test-jar</goal>
            </goals>
            <configuration>
              <skip>${skipTestJar}</skip>
              <skipIfEmpty>true</skipIfEmpty>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- END plugin maven-jar-plugin -->

      <!-- BEGIN plugin exec-maven-plugin -->

      <plugin>
        <groupId>org.codehaus.mojo</groupId>
        <artifactId>exec-maven-plugin</artifactId>
        <version>${plugin.version.exec-maven-plugin}</version>
        <executions>
        
          <!-- BEGIN execution symlink-jar -->
        
          <execution>
            <id>symlink-jar</id>
            <phase>package</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <executable>ln</executable>
              <arguments>
                <argument>-fnsv</argument>
                <argument>${project.build.finalName}.${project.packaging}</argument>
                <argument>${basedir}/target/current.${project.packaging}</argument>
              </arguments>
            </configuration>
          </execution>

          <!-- END execution symlink-jar -->
        
          <!-- BEGIN execution symlink-test-jar -->
        
          <execution>
            <id>symlink-test-jar</id>
            <phase>package</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <skip>${skipTestJar}</skip>
              <executable>ln</executable>
              <arguments>
                <argument>-fnsv</argument>
                <argument>${project.build.finalName}-tests.${project.packaging}</argument>
                <argument>${basedir}/target/current-tests.${project.packaging}</argument>
              </arguments>
              <skip>${skipTestJar}</skip>
            </configuration>
          </execution>

          <!-- END execution symlink-test-jar -->
        
          <!-- BEGIN execution symlink-with-deps-jar -->
        
          <execution>
            <id>symlink-with-deps-jar</id>
            <phase>package</phase>
            <goals>
              <goal>exec</goal>
            </goals>
            <configuration>
              <skip>${skipSpringBootRepackage}</skip>
              <executable>ln</executable>
              <arguments>
                <argument>-fnsv</argument>
                <argument>${project.build.finalName}-${fatJarClassifier}.${project.packaging}</argument>
                <argument>${basedir}/target/current-${fatJarClassifier}.${project.packaging}</argument>
              </arguments>
            </configuration>
          </execution>

          <!-- END execution symlink-with-deps-jar -->        

        </executions>
      </plugin>

      <!-- END plugin exec-maven-plugin -->

      <!-- BEGIN plugin maven-source-plugin -->

      <!--  To deploy Source JARs to Maven Central; see http://central.sonatype.org/pages/apache-maven.html -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-source-plugin</artifactId>
        <version>${plugin.version.maven-source-plugin}</version>
        <executions>
          <execution>
            <id>attach-sources</id>
            <goals>
              <goal>jar-no-fork</goal>
            </goals>
            <configuration>
              <skipSource>${skipSources}</skipSource>
            </configuration>
          </execution>
        </executions>
      </plugin>
        
      <!-- END plugin maven-source-plugin -->

      <!-- BEGIN plugin maven-javadoc-plugin -->

      <!--  To deploy Javadoc JARS to Maven Central; see http://central.sonatype.org/pages/apache-maven.html -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-javadoc-plugin</artifactId>
        <version>${plugin.version.maven-javadoc-plugin}</version>
        <executions>
          <execution>
            <id>attach-javadocs</id>
            <phase>package</phase>
            <goals>
              <goal>jar</goal>
            </goals>
            <configuration>
              <outputDirectory>${project.reporting.outputDirectory}/apidocs</outputDirectory>
              <skip>${skipJavadoc}</skip>
            </configuration>
          </execution>
        </executions>
        <configuration>
          <doclint>none</doclint>
        </configuration>
      </plugin>

      <!-- END plugin maven-javadoc-plugin -->

      <!-- BEGIN plugin maven-gpg-plugin -->

      <!--  To deploy GPG-signed components to Maven Central; see http://central.sonatype.org/pages/apache-maven.html -->
      <plugin>
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-gpg-plugin</artifactId>
        <version>${plugin.version.maven-gpg-plugin}</version>
        <executions>
          <execution>
            <id>sign-artifacts</id>
            <phase>verify</phase>
            <goals>
              <goal>sign</goal>
            </goals>
            <configuration>
              <skip>${skipGpg}</skip>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- END plugin maven-gpg-plugin -->

      <!-- BEGIN plugin maven-deploy-plugin -->

      <!--  To deploy to Maven Central; see http://central.sonatype.org/pages/apache-maven.html  -->
      <plugin>
        <!-- see https://books.sonatype.com/nexus-book/2.9/reference/staging-sect-deployment.html -->
        <groupId>org.apache.maven.plugins</groupId>
        <artifactId>maven-deploy-plugin</artifactId>
        <version>${plugin.version.maven-deploy-plugin}</version>
        <configuration>
          <skip>true</skip>
        </configuration>
      </plugin>
      <plugin>
        <groupId>org.sonatype.plugins</groupId>
        <artifactId>nexus-staging-maven-plugin</artifactId>
        <version>${plugin.version.nexus-staging-maven-plugin}</version>
        <extensions>true</extensions>
        <configuration>
          <serverId>ossrh</serverId>
          <nexusUrl>https://oss.sonatype.org/</nexusUrl>
          <autoReleaseAfterClose>true</autoReleaseAfterClose>
          <!-- Added by us to parameterize the build -->
          <skipStaging>${skipDeploy}</skipStaging>
        </configuration>
      </plugin>
          
      <!-- END plugin maven-deploy-plugin -->

      <!-- BEGIN plugin spring-boot-maven-plugin -->

      <plugin>
        <groupId>org.springframework.boot</groupId>
        <artifactId>spring-boot-maven-plugin</artifactId>
        <version>${lockss.spring-boot.version}</version>
        <executions>
          <execution>
            <goals>
              <goal>repackage</goal><!-- package phase -->
            </goals>
            <configuration>
              <skip>${skipSpringBootRepackage}</skip>
              <classifier>${fatJarClassifier}</classifier>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- END plugin spring-boot-maven-plugin -->

      <!-- BEGIN plugin dockerfile-maven-plugin -->

      <plugin>
        <groupId>com.spotify</groupId>
        <artifactId>dockerfile-maven-plugin</artifactId>
        <version>${plugin.version.dockerfile-maven-plugin}</version>
        <executions>
          <execution>
            <id>docker-build-and-push</id>
            <goals>
              <goal>build</goal><!-- package phase -->
              <goal>push</goal><!-- deploy phase -->
            </goals>
          </execution>
        </executions>
        <configuration>
          <skip>${skipDocker}</skip>
          <skipBuild>${skipDockerBuild}</skipBuild>
          <skipTag>${skipDockerTag}</skipTag>
          <skipPush>${skipDockerPush}</skipPush>
          <repository>${dockerRepository}</repository>
          <tag>${dockerTag}</tag>
          <buildArgs>
            <SVC_PORT>${dockerServicePort}</SVC_PORT>
          </buildArgs>
        </configuration>
      </plugin>

      <!-- END plugin dockerfile-maven-plugin -->

      <!-- BEGIN plugin maven-postman-plugin -->

      <plugin>
        <groupId>ch.fortysix</groupId>
        <artifactId>maven-postman-plugin</artifactId>
        <version>${plugin.version.maven-postman-plugin}</version>
        <executions>
          <execution>
            <id>send-deploy-mail</id>
            <phase>deploy</phase>
            <goals>
              <goal>send-mail</goal>
            </goals>
            <configuration>
              <skip>${skipDeployEmail}</skip>
              <failonerror>${deployEmailFailOnError}</failonerror>
              <multipartSupported>false</multipartSupported>
              <mailcontenttype>text/plain</mailcontenttype>
              <from>${deployEmailFrom}</from>
              <receivers>
                <receiver>${deployEmailTo}</receiver>
              </receivers>
              <subject>Build deployed: ${project.artifactId} ${project.version} (${git.branch})</subject>
              <textMessage><![CDATA[A build of ${project.artifactId} version ${project.version} was deployed around ${maven.build.timestamp}.

BUILD CONTEXT:
Project: ${project.groupId}:${project.artifactId}:${project.version}
Build timestamp: ${maven.build.timestamp}
Git user: ${git.build.user.name} <${git.build.user.email}>
Git repository: ${git.remote.origin.url} (${git.branch})
Git commit: ${git.commit.id.abbrev} (dirty: ${git.dirty})

JAVA CONTEXT:
Java: ${java.version} (${java.vendor})
JVM: ${java.vm.name} ${java.vm.version} (${java.vm.vendor})
Maven: ${maven.build.version}

SYSTEM CONTEXT:
OS: ${os.name} ${os.version} ${os.arch}
Local user: ${user.name}
Local directory: ${user.dir}
]]></textMessage>
            </configuration>
          </execution>
        </executions>
      </plugin>

      <!-- END plugin maven-postman-plugin -->

    </plugins>
  
    <!-- END plugins -->

  </build>
  
  <!-- END build -->

  <profiles>
  
    <profile>
      <id>lockss-release</id>

      <properties>
        <!-- skipTestJar remains true unless set to false in child -->
        <skipJavadoc>false</skipJavadoc>
        <skipSources>false</skipSources>
        <skipGpg>false</skipGpg>
        <skipDeploy>false</skipDeploy>
        <!-- skipDocker remains true unless Dockerfile processing enabled in child -->
        <skipDockerBuild>false</skipDockerBuild>
        <skipDockerTag>${skipDockerBuild}</skipDockerTag><!--  if build then tag -->
        <skipDockerPush>false</skipDockerPush>
      </properties>
    
    </profile>
  
    <profile>
      <id>lockss-docker-latest</id>

      <properties>
        <skipTestJar>true</skipTestJar>
        <skipTests>true</skipTests>
        <skipJavadoc>true</skipJavadoc>
        <skipSources>true</skipSources>
        <skipGpg>true</skipGpg>
        <skipDeploy>true</skipDeploy>
        <!-- skipDocker remains true unless Dockerfile processing enabled in child -->
        <skipDockerBuild>false</skipDockerBuild>
        <skipDockerTag>false</skipDockerTag>
        <skipDockerPush>false</skipDockerPush>
        <dockerTag>latest</dockerTag>
      </properties>

    </profile>
    
    <!-- 
    
        travis-maven-central profile
        
        Assumes that the code has been cleaned, built and tested successfully,
        and is only concerned with doing the Maven Central/OSSRH deploy.
    
    -->
    <profile>
      <id>travis-maven-central</id>

      <properties>
        <skipTests>true</skipTests>
        <!-- skipTestJar remains true unless set to false in child -->
        <skipJavadoc>false</skipJavadoc>
        <skipSources>false</skipSources>
        <skipGpg>false</skipGpg>
        <skipDeploy>false</skipDeploy>
        <skipDocker>true</skipDocker>
      </properties>
    
    </profile>
  
    <!-- 
    
        travis-docker-hub profile
        
        Assumes that the code has been cleaned, built and tested successfully,
        and is only concerned with doing the Docker Hub deploy.
    
    -->
    <profile>
      <id>travis-docker-hub</id>

      <properties>
        <skipTests>true</skipTests>
        <skipTestJar>true</skipTestJar>
        <skipJavadoc>true</skipJavadoc>
        <skipSources>true</skipSources>
        <skipGpg>true</skipGpg>
        <skipDeploy>true</skipDeploy>
        <!-- skipDocker remains true unless Dockerfile processing enabled in child -->
        <skipDockerBuild>false</skipDockerBuild>
        <skipDockerTag>${skipDockerBuild}</skipDockerTag><!--  if build then tag -->
        <skipDockerPush>false</skipDockerPush>
      </properties>
    
    </profile>
  
    <profile>
      <id>lockss-apis</id>

      <build>
      
        <plugins>
        
          <!-- To create a pretty REST API diagram from docs/swagger.yaml -->
          <plugin>
            <groupId>io.swagger</groupId>
            <artifactId>swagger-codegen-maven-plugin</artifactId>
            <version>${plugin.version.swagger-codegen-maven-plugin}</version>
            <executions>
              <execution>
                <goals>
                  <goal>generate</goal>
                </goals>
                <configuration>
                  <inputSpec>docs/swagger.yaml</inputSpec>
                  <language>html</language>
                </configuration>
              </execution>
            </executions>
          </plugin>
    
        </plugins>
        
      </build>
      
    </profile>
      
  </profiles>
  
</project>
